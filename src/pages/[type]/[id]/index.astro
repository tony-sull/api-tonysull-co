---
import { Markdown } from 'astro-remote'
import { unescape } from 'html-escaper'
import { get as jsonld } from './index.jsonld.js'
import Schema from '@components/Schema.astro'
import type { Schema as Thing } from '@schemas/index.js'
import { identifierToSlug } from '@utils/slugify.js'

function parseAccept(request: Request) {
  return (request.headers.get('Accept') || '')
    .split(',')
    .map(a => a.trim())
    .filter(Boolean)
}

const accept = parseAccept(Astro.request)

// reuse the `.md` endpoint
if (accept.includes('text/markdown')) {
  return await md(Astro)
}

const res = (await jsonld(Astro)) as Response

// 404, bail early
if (res.status !== 200) {
  return res
}

// reuse the `.jsonld` endpoint
if (
  accept.includes('application/json') ||
  accept.includes('application/ld+json')
) {
  return res
}

const { type } = Astro.params

const { articleBody, ...script } = await res.json()
---

<html>
  <head>
    <meta charset="UTF-8" />
    <title>{script.name}</title>
  </head>
  <body>
    <Schema json={script} space={2} />
    <main>
      <h1>{unescape(script.name)}</h1>
      {articleBody && <Markdown content={unescape(articleBody)} />}
      {script['@graph'] && (
        <ul>
          {script['@graph'].map((item: Thing) => (
            <li>
              <a href={`/${item['@type']}/${identifierToSlug(item.identifier)}`}>{item.name}</a>
            </li>
          ))}
        </ul>
      )}
    </main>
  </body>
</html>
